%AER721 Assignment 3%Mahal Mammadli 500642220%% Question 1clear all; clcdeg = pi/180;global mu%...Data declaration:mu = 398600;r1 = [5887 -3520 -1204];r2 = [5572 -3457 -2376];r3 = [5088 -3289 -3480];fprintf('-----------------------------------------------------')fprintf('\n Gibbs Method\n')fprintf('\nInput data:\n')fprintf('\n  Gravitational parameter (km^3/s^2)  = %g\n', mu)fprintf('\n  r1 (km) = [%g  %g  %g]', r1(1), r1(2), r1(3))fprintf('\n  r2 (km) = [%g  %g  %g]', r2(1), r2(2), r2(3))fprintf('\n  r3 (km) = [%g  %g  %g]', r3(1), r3(2), r3(3))fprintf('\n\n');%...Algorithm 5.1:[1] [v2, ierr] = gibbs(r1, r2, r3);%...If the vectors r1, r2, r3, are not coplanar, abort:if ierr == 1    fprintf('\n  These vectors are not coplanar.\n\n')    returnend%...Algorithm 4.2:[1]coe  = coe_from_sv(r2,v2,mu);h    = coe(1);e    = coe(2);RA   = coe(3);incl = coe(4);w    = coe(5);TA   = coe(6);a    = coe(7);fprintf(' Solution:')fprintf('\n');fprintf('\n  v2 (km/s) = [%g  %g  %g]', v2(1), v2(2), v2(3))fprintf('\n\n  Orbital elements:');fprintf('\n    Angular momentum (km^2/s)  = %g', h) fprintf('\n    Eccentricity               = %g', e)fprintf('\n    Inclination (deg)          = %g', incl/deg)fprintf('\n    RA of ascending node (deg) = %g', RA/deg)fprintf('\n    Argument of perigee (deg)  = %g', w/deg)fprintf('\n    True anomaly (deg)         = %g', TA/deg) fprintf('\n    Semimajor axis (km)        = %g', a)%...If the orbit is an ellipse, output the period:if e < 1    T = 2*pi/sqrt(mu)*coe(7)^1.5;    fprintf('\n    Period (s)                 = %g', T)end %...Calculate periapse and apoapse radiusRp= (h^2/mu)*(1/(1+e));Ra= (h^2/mu)*(1/(1+e*cos(pi)));fprintf('\n    Radius at periapse (km)    = %g', Rp) fprintf('\n    Radius at apoapse (km)     = %g', Ra)fprintf('\n-----------------------------------------------------\n')% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%% Question 2%Data declarationm=100000; %kgr1=6378+200;%kmrp=r1;%kmra=6378+3000;%kmF=150; %kN%Eccentricitye2=((ra-rp)/(ra+rp));fprintf('    Eccentricity of orbit is %g', e2);%Delta V BurnV_circular_orbit=sqrt(mu/r1); %km/sh_p=sqrt((rp*mu)/(1/(1+e2)));V_periapse=(mu/h_p)*(1+e2); %km/sdeltaV=V_periapse-V_circular_orbit; %km/sfprintf('\n    Delta V burn is %g [km/s]', deltaV);%Duration of the burnt_burn=(m*deltaV)/F;fprintf('\n    Duration of burn is %g [s] %g [mins]', t_burn,t_burn/60);%The burn time is not a reasonble approximation for an impulse firing as it%lasts 23 minutes. F_new=150000;%kNt_burn=(m*deltaV)/F_new;fprintf('\n    Duration of changed burn is %g [s]', t_burn);%The thrust produced instantaneously would have to be increased by 1000 to%reduce the burn time to under a second. The mass of the spacecraft can be%deacreased as well to have the same outcome. fprintf('\n-----------------------------------------------------\n')%% References %[1] Curtis, H. D. (2013). Orbital Mechanics for Engineering Students. Amsterdam: Elsevier Butterworth Heinemann.%